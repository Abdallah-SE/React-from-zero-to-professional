1- How to style the react components
   - first way by the default import you can use as the default react app like import './App.css';
   - second way by go to the public folder then add the style link in the index.html
     then create the file on public folder for example style.css that will be look like that
     <link rel="stylesheet" href="%PUBLIC_URL%/style.css" />
     hint you use %PUBLIC_URL%/
    hints that for large one css file
    or when we want to load bootstrap files
    but for style with specific component
    use default react in the first way like app.css


--------------------------------------------Dynamic class name

you can create const className = 'containerlg'; then pass it to the className in react component
it's better to add the className = ''; inside state note that state is declared before the render 
and accessing it by this.state inside the class
and you can change the className by state through function setState

------------------------------------------------Styling dynamically

to write inline css we can write style="color:white"
but in react we must add this in object like this 
<h1 style={{color: 'blue'}}>Set the styling dynamically</h1>

note that style using object and value between single or double quatation 
   ways to deal with attributes of html in jsx
- in react fontWeight instead font-weight
- if you want to use font-weight in react jsx just but it between single quatation
- you can add style in const then pass it to the render
- can use condition in add className values and change the inline style

<button onClick={() => {this.setState({active: !this.state.active})}}>

if(this.state.active){
            style1.color = 'yellow'
        }

---------------------------------------------------- Styling - using JS to set classes dynamically

it's used for difficult cases like more than class
by string values or array of variables
render (){///Render JSX html code
        let classes = '';
        
        if(true) {
            classes +='green ';
        }
        if(true) {
            classes +='whiteText ';
        }if(true) {
            classes +='boldText ';
        }
        
        let classes2 = [];
        if(true) {
            classes2.push('green');
        }
        if(true) {
            classes2.push('redText');
        }if(true) {
            classes2.push('italicText');
        }
        
        
        return <div>
            <div className={classes}>
               Test
            </div>
            <div className={classes2.join(' ')}>
               second Test
            </div>
        </div>;
    }
}


--------------------------------------------classnames packages

- import it then 

        let classes = classNames('test1', {'green' : 1<3, 'redText': 3==3, 'italicText': 1==1} , {'green' : 1<3, 'redText': 3==3, 'italicText': 1==1});

   - fixed classes like test1
   - expressions
   - you can use a lot of objects
   - array can be used 
   - go to docs of classnames in github



 

     
    