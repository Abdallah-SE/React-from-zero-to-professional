(That's is 18.2.0)(by-add-the-following-code-in-react-render-in-index.js)({react.version})
1- What's ReactJs ? 

- React is js library for building user interfaces
- developled in facebook on 2011
- one of the most popular js library


2- What to build with ReactJs ? 

-  widgets inside MPAs
- Single-Page Application (SPAs)
- Mobile Apps with React Native


3- How ReactJs works ? 
- Components
- Root component 
- JSX
- Virtual Dom
- We need other libraries ...


4- Why do i need a JS framework ? 

- speed up development
- Components
- Performance
- High Quality Apps
- Suitable for teamwork
- Community support

5- ReactJs Features ? 

- popular
- community
- libraries
- progressive :very easy to pick up and integrate
- performance
- documentation

6- Course Sections

- basics
- conditions & looping
- forms & validation
- sytling
- http requests
- routing
- redux
- animation
- unit test
- NextJS

7- what's the JSX 

- JSX is a JavaScript Extension Syntax used in React to easily write HTML and JavaScript together.

8- what's nested JSX in react : 
 -nested JSX is that it must return a single element
 -This one parent element would wrap all of the other levels of nested elements.
 -For instance, several JSX elements written as siblings with no parent wrapper element will not transpile.

9- When rendering multiple elements like this, you can wrap them all in parentheses,

10-  uses a div tag to wrap all the child elements within a single parent element.
 If you remove the div, the JSX will no longer transpile. Keep this in mind, 
since it will also apply when you return JSX elements in React components.

11- Add Comments in JSX
    - JSX is a syntax that gets compiled into valid JavaScript.
    - Sometimes, for readability, you might need to add comments to your code. 
    - Like most programming languages, JSX has its own way to do this.
    - To put comments inside JSX, you use the syntax {/* */} to wrap around the comment text.


12- ReactDOM ( React's rendering API)
   used to render  JSX directly to the HTML DOM using
   offers a simple method to render React elements to the DOM which looks like this:
   ReactDOM.render(componentToRender, targetNode),
   where the first argument is the React element or component that you want to render, 
   and the second argument is the DOM node that you want to render the component to.

  ReactDOM.render() must be called after the JSX element declarations, 
  just like how you must declare variables before using them.

13 - The react-dom package 
     provides DOM-specific methods that can be used at the top level of your app and as an escape hatch 
     to get outside the React model if you need to.


14- different between JSX and html : 
   @ So far, it may seem that HTML and JSX are exactly the same.
   One key difference in JSX is that you can 
   no longer use the word class to define HTML classes. 
   This is because class is a reserved word in JavaScript. Instead, JSX uses className.

   @ In fact, the naming convention for all HTML attributes and event references in JSX become camelCase.
   For example, a click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange.
   While this is a subtle difference, it is an important one to keep in mind moving forward.

15- what's Self-Closing JSX Tags

    Any JSX element can be written with a self-closing tag, and every element must be closed. 
    The line-break tag, for example, must always be written as <br /> in order to be valid JSX that can be transpiled.
     A <div>, on the other hand, can be written as <div /> or <div></div>. 
     The difference is that in the first syntax version there is no way to include anything in the <div />.
     You will see in later challenges that this syntax is useful when rendering React components.

16 what's  a Stateless Functional Component : 

   Components are the core of React. Everything in React is a component and here you will learn how to create one.

   There are two ways to create a React component. 
   The first way is to use a JavaScript function. 
   Defining a component in this way creates a stateless functional component. 
   The concept of state in an application will be covered in later challenges.   

   For now, think of a stateless component as one that can receive data and render it, 
   but does not manage or track changes to that data.
   (We'll cover the second way to create a React component in the next challenge.)

   
    To create a component with a function, you simply write a JavaScript function that returns either JSX or null.
    One important thing to note is that React requires your function name to begin with a capital letter.

    advanges of the react components : 

    To create a component with a function, you simply write a JavaScript function that returns either JSX or null.
    One important thing to note is that React requires your function name to begin with a capital letter.
    
   

17 - Create a React Component : 


class Kitten extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <h1>Hi</h1>
    );
  }
}

* This creates an ES6 class Kitten which extends the React.Component class. 
    So the Kitten class now has access to many useful React features, 
                  such as local state and lifecycle hooks. 

* Kitten class has a constructor defined within it that calls super().
         It uses super() to call the constructor 
               of the parent class, in this case React.Component. 

* The constructor is a special method used during the initialization of objects that are created with the class keyword.
  It is best practice to call a component's constructor with super, and pass props to both.
  This makes sure the component is initialized properly. 
  For now, know that it is standard for this code to be included.
   Soon you will see other uses for the constructor as well as props.


so the render component like this

render() {
    // Change code below this line
    return <div>
        <h1>Hello React!</h1>
    </div>

    // Change code above this line
  }



18- Create a Component with Composition

- we can compose multiple React components together. 
  Imagine you are building an app and have created three components: 
  a Navbar, Dashboard, and Footer.

- To compose these components together, you could create an App parent component which renders each of these three components 
  as children. 
  To render a component as a child in a React component,
   you include the component name written as a custom HTML tag in the JSX. 
   For example, in the render method you could write:
return (
 <App>
  <Navbar />
  <Dashboard />
  <Footer />
 </App>
)

-  In the code editor, there is a simple functional component called ChildComponent and a class component called ParentComponent.
    Compose the two together by rendering the ChildComponent within the ParentComponent. 
    Make sure to close the ChildComponent tag with a forward slash.

   Note: ChildComponent is defined with an ES6 arrow function because this is a very common practice when using React.
    However, know that this is just a function. 
    If you aren't familiar with the arrow function syntax, please refer to the JavaScript section.



   
19 - Use React to Render Nested Components
    
    -Component composition is one of React's powerful features.
    When you work with React, it is important to start thinking about your user interface in terms of components
    like the App example in the last challenge. 

    - You break down your UI into its basic building blocks, and those pieces become the components. 
      This helps to separate the code responsible for the UI from the code responsible for handling your application logic.

    - It can greatly simplify the development and maintenance of complex projects.

------Example :  There are two functional components defined in the code editor, 
                 called TypesOfFruit and Fruits. Take the TypesOfFruit component and compose it, or nest it,
                 within the Fruits component. 
                 Then take the Fruits component and nest it within the TypesOfFood component. 
                 The result should be a child component, nested within a parent component,
                 which is nested within a parent component of its own!


20 - Compose React Components 
     You can render JSX elements, stateless functional components, and ES6 class components within other components.



21 -  Render a Class Component to the DOM
      - The past few challenges focused on components and composition, so the rendering was done for you behind the scenes.  
      none of the React code you write will render to the DOM without making a call to the ReactDOM API.

      - Here's a refresher on the syntax: ReactDOM.render(componentToRender, targetNode). 
      The first argument is the React component that you want to render.
      The second argument is the DOM node that you want to render that component within.
      
      - React components are passed into ReactDOM.render() a little differently than JSX elements.
        For JSX elements, you pass in the name of the element that you want to render. However,
        For React components, you need to use the same syntax as if you were rendering a nested component, 
        for example ReactDOM.render(<ComponentToRender />, targetNode).
        You use this syntax for both ES6 class components and functional components.



22 - Write a React Component from Scratch : 

     - React components are the core building blocks of React applications
     - a typical React component is an ES6 class which extends React.Component. 
       It has a render method that returns HTML (from JSX) or null. This is the basic form of a React component. 

// Change code below this line
class MyComponent extends React.Component {
  constructor (props) {
    super(props)
  }
  render () {
    return <div>
        <h1>
            My First React Component!
        </h1>
    </div>
  }
}

ReactDOM.render(<MyComponent />, document.getElementById("challenge-node"));


23 - Pass Props to a Stateless Functional Component
     - you can pass props, or properties, to child components. Say you have an App component which renders a child component 
       called Welcome which is a stateless functional component. You can pass Welcome a user property by writing:

<App>
  <Welcome user='Mark' />
</App>
 
  - You use custom HTML attributes created by you and supported by React to be passed to the component.
    In this case, the created property user is passed to the component Welcome.
    Since Welcome is a stateless functional component, it has access to this value like so:
     ############ Example : 
              const Welcome = (props) => <h1>Hello, {props.user}!</h1>
 -It is standard to call this value props and when dealing with stateless functional components, 
  you basically consider it as an argument to a function which returns JSX. 
  You can access the value of the argument in the function body.
  With class components, you will see this is a little different.

- Example : 

      There are Calendar and CurrentDate components in the code editor. 
      When rendering CurrentDate from the Calendar component, pass in a property of date assigned to the current date
      from JavaScript's Date object. Then access this prop in the CurrentDate component,
      showing its value within the p tags. Note that for prop values to be evaluated as JavaScript, 
      they must be enclosed in curly brackets, for instance date={Date()}.

      
24 - Pass an Array as Props
pass array 
<List tasks={['Sallama', 'Ehsan', 'Saad']} />
then use it and use join to separate each item by comma
<p>{props.tasks.join(', ')}</p>

25 - Use Default Props
     
-You can assign default props to a component as a property on the component itself and React assigns the default prop if necessary.
 This allows you to specify what a prop value should be if no value is explicitly provided. 
 For example, if you declare MyComponent.defaultProps = { location: 'San Francisco' }, 
 you have defined a location prop that's set to the string San Francisco,
 unless you specify otherwise.
  React assigns default props if props are undefined, but if you pass null as the value for a prop,
  it will remain null.

like that 

ShoppingCart.defaultProps = {
  items: 0
}


26 - 


27 - Override Default Props 

   - The ability to set default props is a useful feature in React.
     The way to override the default props is to explicitly set the prop values for a component.
    const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
}

Items.defaultProps = {
  quantity: 0
}

class ShoppingCart extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    { /* Change code below this line */ }
    return <Items quantity={10}/>
    { /* Change code above this line */ }
  }
};




28 - Use PropTypes to Define the Props You Expect
     React provides useful type-checking features to verify that components receive props of the correct type. 
     For example, your application makes an API call to retrieve data that you expect to be in an array,
     which is then passed to a component as a prop. You can set propTypes on your component to require the data to be of type array.
     This will throw a useful warning when the data is of any other type.

     It's considered a best practice to set propTypes when you know the type of a prop ahead of time. 
    You can define a propTypes property for a component in the same way you defined defaultProps.
    Doing this will check that props of a given key are present with a given type. 
    Here's an example to require the type function for a prop called handleClick:
          ->      MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }


In the example above, the PropTypes.func part checks that handleClick is a function.
 Adding isRequired tells React that handleClick is a required property for that component.
 You will see a warning if that prop isn't provided. 
Also notice that func represents function
. Among the seven JavaScript primitive types, function and boolean (written as bool) are the only two that use unusual spelling. 
In addition to the primitive types, there are other types available. For example, you can check that a prop is a React element. 
Please refer to the documentation for all of the options.

Note: As of React v15.5.0, PropTypes is imported independently from React, like this: import PropTypes from 'prop-types';
const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
};

// Change code below this line
Items.propTypes = {
  quantity: PropTypes.number.isRequired
};
// Change code above this line

Items.defaultProps = {
  quantity: 0
};

class ShoppingCart extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <Items />
  }
};



not isRequired removed since mmm reacr 15.

look on docs


29 - Access Props Using this.props

 - rather than a stateless functional component? The ES6 class component uses a slightly different convention to access props.
   if the child component that you're passing a prop to is an ES6 class component,

 - Anytime you refer to a class component within itself, you use the this keyword. 
   To access props within a class component, you preface the code that you use to access it with this. 
   For example, if an ES6 class component has a prop called data, you write {this.props.data} in JSX.

Example       -> Render an instance of the Welcome component in the parent component App. 
Here, give Welcome a prop of name and assign it a value of a string. Within the child, Welcome, 
access the name prop within the strong tags.

class App extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
        <div>
            { /* Change code below this line */ }
            <Welcome name={"Ahlan"}/>
            { /* Change code above this line */ }
        </div>
    );
  }
};

class Welcome extends React.Component {
  constructor(props) {
    super(props);
    let name  = '';
  }
  render() {
    return (
        <div>
          { /* Change code below this line */ }
          <p>Hello, <strong>{this.props.name}</strong>!</p>
          { /* Change code above this line */ }
        </div>
    );
  }
};





30 -  Review Using Props with Stateless Functional Components 
      - A stateless functional component is any function you write which accepts props and returns JSX. 
      A stateless component, on the other hand, is a class that extends React.Component,
      but does not use internal state (covered in the next challenge). Finally,
      a stateful component is a class component that does maintain its own internal state. 
      You may see stateful components referred to simply as components or React components.

      - A common pattern is to try to minimize statefulness and to create stateless functional components wherever possible.
      This helps contain your state management to a specific area of your application. In turn, 
      this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior.
      
       code : 
class CampSite extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <Camper />
      </div>
    );
  }
};
// Change code below this line
 
const Camper = (props) => {
  return <p>{props.name}</p>
}

Camper.defaultProps = {name: 'CamperBot'}
Camper.propTypes = { name: PropTypes.string.isRequired}



31 - Create a Stateful Component

    -  One of the most important topics in React is state. State consists of any data your application needs to know about, 
       that can change over time.
       You want your apps to respond to state changes and present an updated UI when necessary.
       React offers a nice solution for the state management of modern web applications.

    - You create state in a React component by declaring a state property on the component class in its constructor. 
      This initializes the component with state when it is created. 
      The state property must be set to a JavaScript object.
      Declaring it looks like this:

       this.state = {

       }
      

       -  You have access to the state object throughout the life of your component. 
          You can update it, render it in your UI, and pass it as props to child components. 
       -  The state object can be as complex or as simple as you need it to be.
       -  Note that you must create a class component by extending React.Component in order to create state like this.

class StatefulComponent extends React.Component {
  state = {
    firstName : ''
  }
  constructor(props) {
    super(props);
    // Only change code below this line

    // Only change code above this line
  }
  render() {
    return (
      <div>
        <h1>{this.state.firstName}</h1>
      </div>
    );
  }
};




32 - Render State in the User Interface
   
    - Once you define a component's initial state,
    you can display any part of it in the UI that is rendered. 
    If a component is stateful, it will always have access to the data in state in its render() method.
    You can access the data with this.state.

    - If you want to access a state value within the return of the render method, you have to enclose the value in curly braces.
    - state is one of the most powerful features of components in React. 
      It allows you to track important data in your app and render a UI in response to changes in this data.
      If your data changes, your UI will change. React uses what is called a virtual DOM, 
      to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components 
      using that data - including child components that received the data as a prop.
      React updates the actual DOM, but only where necessary. 
      This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.

     - Note that if you make a component stateful, no other components are aware of its state. Its state is completely encapsulated,
       or local to that component, unless you pass state data to a child component as props.
       This notion of encapsulated state is very important because it allows you to write certain logic,
       then have that logic contained and isolated in one place in your code.
Code : 

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'freeCodeCamp'
    }
  }
  render() {
    return (
      <div>
        { /* Change code below this line */ }
        <h1>{this.state.name}</h1>
        { /* Change code above this line */ }
      </div>
    );
  }
};



33 - Render State in the User Interface Another Way
     - There is another way to access state in a component. In the render() method, 
       before the return statement, you can write JavaScript directly. 
       For example, you could declare functions, access data from state or props, perform computations on this data, and so on.
       Then, you can assign any data to variables, which you have access to in the return statement.

     - Example with code
          ->   In the MyComponent render method, define a const called name and set it equal to the name value in 
               the component's state. Because you can write JavaScript directly in this part of the code,
               you don't have to enclose this reference in curly braces.

              Next, in the return statement, render this value in an h1 tag using the variable name. Remember, 
               you need to use the JSX syntax (curly braces for JavaScript) in the return statement.
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'freeCodeCamp'
    }
   
  }
  
  render() { 
    const name = this.state.name;
    // Change code below this line

    // Change code above this line
    return (
      <div>
        { /* Change code below this line */ }
          <h1> 
          {name}
          </h1>
        { /* Change code above this line */ }
      </div>
    );
  }
};


34 - Set State with this.setState

         - The previous challenges covered component state and how to initialize state in the constructor. 
           There is also a way to change the component's state. 
           React provides a method for updating component state called setState. 
          You call the setState method within your component class like so: this.setState(), 
          passing in an object with key-value pairs.
          The keys are your state properties and the values are the updated state data. 
          For instance, if we were storing a username in state and wanted to update it, it would look like this:
 this.setState({
  username: 'Lewis'
});

     - React expects you to never modify state directly, instead always use this.setState() when state changes occur. 
       Also, you should note that React may batch multiple state updates in order to improve performance. 
       What this means is that state updates through the setState method can be asynchronous. 
       There is an alternative syntax for the setState method which provides a way around this problem. 
       This is rarely needed but it's good to keep it in mind! Please consult our React article for further details.
      
please go to https://www.freecodecamp.org/news/what-is-state-in-react-explained-with-examples/

and apply and understand how to update state

The state of MyComponent should initialize with the key value pair { name: Initial State }.
Passed:MyComponent should render an h1 heading element.
Passed:The rendered h1 heading element should contain text rendered from the component's state.
Passed:Calling the handleClick method on MyComponent should set the name property in state to equal React Rocks!.

code : 

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'Initial State'
    };
    this.handleClick = () => 
    {this.handleClick.bind(this);
    this.setState({name: 'React Rocks!'})}
  }
  handleClick() {
    // Change code below this line

    // Change code above this line
  }
  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Click Me</button>
        <h1>{this.state.name}</h1>
      </div>
    );
  }
};




35 - Bind 'this' to a Class Method
     - In addition to setting and updating state, you can also define methods for your component class.
       A class method typically needs to use the this keyword so it can access properties on the class (such as state and props) 
       inside the scope of the method.
       There are a few ways to allow your class methods to access this.
       One common way is to explicitly bind this in the constructor so this becomes bound to the class methods when the component 
       is initialized. You may have noticed the last challenge used this.handleClick = this.handleClick.bind(this)
       for its handleClick method in the constructor.
      Then, when you call a function like this.setState() within your class method, 
      this refers to the class and will not be undefined.

     -  Note: The this keyword is one of the most confusing aspects of JavaScript but it plays an important role in React.
       Although its behavior here is totally normal, these lessons aren't the place for an in-depth review of this 
       so please refer to other lessons if the above is confusing!

      - The code editor has a component with a state that keeps track of the text.
         It also has a method which allows you to set the text to You clicked!. However,
         the method doesn't work because it's using the this keyword that is undefined.
         Fix it by explicitly binding this to the handleClick() method in the component's constructor.

     - Next, add a click handler to the button element in the render method. 
       It should trigger the handleClick() method when the button receives a click event.
       Remember that the method you pass to the onClick handler needs curly braces 
       because it should be interpreted directly as JavaScript.

       - Once you complete the above steps you should be able to click the button and see You clicked!.
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      text: "Hello"
    };
    
    // Change code below this line
 this.handleClick = this.handleClick.bind(this)
    // Change code above this line
  }
  handleClick () {
    
    this.setState({
      text: "You clicked!"
    });
  }
  
  render() {
    return (
      <div>
        { /* Change code below this line */ }
        <button onClick={this.handleClick}>Click Me</button>
        { /* Change code above this line */ }
        <h1>{this.state.text}</h1>
      </div>
    );
  }
};


36 - Use State to Toggle an Element
     -  Sometimes you might need to know the previous state when updating the state. 
        However, state updates may be asynchronous -
        this means React may batch multiple setState() calls into a single update.
        This means you can't rely on the previous value of this.state or this.props when calculating the next value. 
         So, you should not use code like this:
this.setState({
  counter: this.state.counter + this.props.increment
});

     - Instead, you should pass setState a function that allows you to access state and props. 
       Using a function with setState guarantees you are working with the most current values of state and props. 
       This means that the above should be rewritten as:

this.setState((state, props) => ({
  counter: state.counter + props.increment
}));

You can also use a form without props if you need only the state:

this.setState(state => ({
  counter: state.counter + 1
}));
Note that you have to wrap the object literal in parentheses, otherwise JavaScript thinks it's a block of code.

Example : 

MyComponent should return a div element which contains a button.
Passed:The state of MyComponent should initialize with a visibility property set to false.
Passed:Clicking the button element should toggle the visibility property in state between true and false.
Passed:An anonymous function should be passed to setState.
Passed:this should not be used inside setState

Code : 

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      visibility: false
    };
    // Change code below this line
        this.toggleVisibility = this.toggleVisibility.bind(this)

    // Change code above this line
  }
  // Change code below this line
toggleVisibility () {
    this.setState((state) => ({
      visibility : !state.visibility
    }))
}
  // Change code above this line
  render() {
    if (this.state.visibility) {
      return (
        <div>
          <button onClick={this.toggleVisibility}>Click Me</button>
          <h1>Now you see me!</h1>
        </div>
      );
    } else {
      return (
        <div>
          <button onClick={this.toggleVisibility}>Click Me</button>
        </div>
      );
    }
  }
}
-------------
37 - Write a Simple Counter

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
    // Change code below this line
    this.increment = this.increment.bind(this)
     this.decrement = this.decrement.bind(this)
     this.reset = this.reset.bind(this)
     
    
    // Change code above this line
  }
  // Change code below this line
   increment () {
     this.setState({
       count : this.state.count + 1
     })
   }
   decrement () {
     this.setState({
       count : this.state.count - 1
     })
   }
   reset () {
     this.setState({
       count : 0
     })
   }
  // Change code above this line
  render() {
    return (
      <div>
        <button className='inc' onClick={this.increment}>Increment!</button>
        <button className='dec' onClick={this.decrement}>Decrement!</button>
        <button className='reset' onClick={this.reset}>Reset</button>
        <h1>Current Count: {this.state.count}</h1>
      </div>
    );
  }
};


38 - Create a Controlled Input
     - Your application may have more complex interactions between state and the rendered UI. 
       For example, form control elements for text input, such as input and textarea, maintain their own state in the DOM 
       as the user types. With React, you can move this mutable state into a React component's state.
       The user's input becomes part of the application state, so React controls the value of that input field. 
       Typically, if you have React components with input fields the user can type into, it will be a controlled input form.


      

39 - 

40 - 

41 - 

42 -

43 - 


     




Notes : 

- onClick is used in the react to listen to clicked for example button
- when declare regular and normal function inside class component and to use this function 
  you must do one of the two things 
  bind the function in the constructor or change the regular function to arrow function
